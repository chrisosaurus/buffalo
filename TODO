codes TODO:
codes.* will eventually become its own library, maybe stw (simple termcode wrapper) 'stew'


buffalo TODO:
deal with text off the right of the screen (wordwrap OR scroll over, later seems easier)
delete key working
goto matching bracket (simple 'stack' counter, will fail for non literals but meh)
undo
sele placeable before sels (as in, before sels is placed not preceeding), highlight maybe red

buffalo maybe TODO:
open(run time specified file, possibly with another already open)
save as
syntax highlighting
consider 'porting' to a gui (text area with selections, mouse and keyboard controls, etc.)

bugs:
selection green and white requires better contrast (sandy uses black text on yellow)
fix search backwards so it will search cur.l[ 0 : cur.o ] <- need to find a tidy solution
highlighting when selection start is before screen and selection end is on screen, doesnt highlight but should <- hard to do in current model
optimisation of drawing when scrolling <- not really a priority
If you type off the screen (and thus the sele goes off the screen) then everything after becomes selected (as sele is never encountered)
should be able to set sele before sels, keep wanting to do this
inserts a single blank line at the end of file on reading, there on subsequent loads, viewing the file in vim doesnt show this.
when I cut a whole line the \n is left behind, is this wanted?
tabs currently dont really exist... makefiles need them
moving by whitespace should include start and end of line(as its really moving by WORD not just whitespace)
word wrap is needed for writing prose rather than code
backspace doesnt appear to free if it deletes a line...
opening buffalo without specifying a file has 'weird' behavior
should buffalo provide any feedback to the user regarding current file, modified state, writing, etc.
probably need a status line indicating which file we have open, if we have unsaved changes, maybe the buffer, file modes (read/write/etc.) and if the file has changed on disk

tidyup:
i_backspace, should seperate into 2 methods. One is i_backspace which deals with moving selection and then calls i_delete which removes previous char.
i_insert, should also be 2 funcs. One sets/extends selection and then calls the other, tab and newline should use the former. Reading a new file should use the latter.

regarding selectiong starting before screen, as sstart is always initially fstart, as we move sstart down we can check if we encounter sels, and if so record that sels
is before the start of the screen.

regarding open/save as, we could make an argument for these being shell features. Bufallo should always be told what file to open on invocation.
If the user wants to save under a different name, they can C-z, cp, fg, save, and then move the files around.
